<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Example_Mapper"
   author="Nick Gammon"
   id="63e6909083318cf63707c044"
   language="Lua"
   purpose="Example mapper"
   save_state="y"
   date_written="2014-10-22"
   requires="4.61"
   version="1.0"
   >

<description trim="y">
<![CDATA[
  AUTOMATIC MAPPER ...  by Nick Gammon

  ACTIONS
  
  mapper help         --> this help  (or click the "?" button on the bottom right)
]]>
</description>

</plugin>

<aliases>
  <alias
   script="OnHelp"
   match="mapper help"
   enabled="y"
  >
</alias>

</aliases>
  
<!--  Script  -->

<script>
<![CDATA[

require "mapper"

dofile(GetPluginInfo(GetPluginID(), 20) .. "MSDPHelper.lua")

config =  { 
          OUR_ROOM_COLOUR         = { name = "Our room",  colour =  ColourNameToRGB "black", },
          }   
 
rooms = { }
areas = { }


-- -----------------------------------------------------------------
-- these commands will be considered "room changing" commands
-- -----------------------------------------------------------------
local valid_direction = {
  n = "n",
  s = "s",
  e = "e",
  w = "w",
  u = "u",
  d = "d",
  ne = "ne",
  sw = "sw",
  nw = "nw",
  se = "se",
  north = "n",
  south = "s",
  east = "e",
  west = "w",
  up = "u",
  down = "d",
  northeast = "ne",
  northwest = "nw",
  southeast = "se",
  southwest = "sw",
  ['in'] = "in",
  out = "out",
  }  -- end of valid_direction
  
-- for calculating the way back
local inverse_direction = {
  n = "s",
  s = "n",
  e = "w",
  w = "e",
  u = "d",
  d = "u",
  ne = "sw",
  sw = "ne",
  nw = "se",
  se = "nw",
  ['in'] = "out",
  out = "in",
  }  -- end of inverse_direction


-- -----------------------------------------------------------------
-- mapper 'get_room' callback - it wants to know about room uid
-- -----------------------------------------------------------------
function get_room (uid)
 
  room = rooms [uid]
  if not room then
    return nil
  end -- if not found
  
  -- how to draw this particular room
  room.bordercolour = config.ROOM_COLOUR.colour
  room.borderpen = miniwin.pen_solid 
  room.borderpenwidth = 1
  room.fillbrush = miniwin.brush_null  -- no fill

  -- draw current room in bolder colour  
  if uid == current_room then
    room.bordercolour = config.OUR_ROOM_COLOUR.colour
    room.borderpenwidth = 2
  end -- not in this area

  room.area = getmsdp("AREA_NAME")
  room.hovermessage = room.name
  return room
end -- get_room 


-------------------------------------------------------------------
-- MSDP Handler Broadcast
-------------------------------------------------------------------
function OnPluginBroadcast (msg, id, name, text)
  if id == "b3aae34498d5bf19b5b2e2af" then
    uid = getmsdp("ROOM_VNUM")
    -- assume we know the room name by now
    -- add to rooms table if not there
    if not rooms [uid] then
      rooms [uid] = { name = room_name, exits = {} }
    end -- if not rooms
    if uid ~= current_room 
      and current_room
      and last_direction_moved then
      -- previous room led here
      rooms [current_room].exits [last_direction_moved] = uid 
      -- assume inverse direction leads back
      rooms [uid].exits [inverse_direction [last_direction_moved]] = current_room
    end -- if
    -- this is now our current room
    current_room = uid
    name = StripANSI(strip_colors(getmsdp("ROOM_NAME")))
    -- ignore really long lines
    if #name > 50 then
      return
    end -- if
    room_name = name
    exits = getmsdp("ROOM_EXITS")
    if exits ~= nil and exits ~= '' then
      --Initial population of Exits from MSDP
      exits = utils.split(exits, ",")
      room_exits = ""
      -- Go through and build the list of valid exits
      -- ignoring all the custom exits ("enter hospital")
      for key, value in pairs(exits) do
        if (valid_direction[value]) then
          if (room_exits ~= "") then 
            room_exits = room_exits.."," 
          end
          room_exits = room_exits..valid_direction[value]
        end
      end
    end
  end -- if id

  print("Room name: ", room_name)
  print("the vnum is: ", current_room)
  print("the exits: ", room_exits)
  -- draw this room
  mapper.draw (current_room)
end -- got_prompt


-- -----------------------------------------------------------------
-- try to detect when we send a movement command
-- -----------------------------------------------------------------
function OnPluginSent (sText)
  last_direction_moved = valid_direction [sText]
end -- OnPluginSent


-- -----------------------------------------------------------------
-- Strip colours
-- -----------------------------------------------------------------
function strip_colors(s)
  s = s:gsub("&&", "\0")
  s = s:gsub("&.", "")
  s = s:gsub("%z", "&")
  return s
end

-- -----------------------------------------------------------------
-- Plugin Install
-- -----------------------------------------------------------------
function OnPluginInstall ()
  -- initialize mapper
  mapper.init { 
    config          = config,       -- ie. colours, sizes
    get_room        = get_room,     -- info about room (uid)
    show_help       = OnHelp,       -- to show help
              }
               
  mapper.mapprint (string.format ("MUSHclient mapper installed, version %0.1f", mapper.VERSION))
end -- OnPluginInstall


-- -----------------------------------------------------------------
-- Plugin Help
-- -----------------------------------------------------------------
function OnHelp ()
  mapper.mapprint (string.format ("[MUSHclient mapper, version %0.1f]", mapper.VERSION))
  mapper.mapprint (world.GetPluginInfo (world.GetPluginID (), 3))
end -- end of OnHelp
]]>
</script>

</muclient>