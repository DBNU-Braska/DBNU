<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="DBNU_Chat_Echo"
   author="Fiendish"
   id="55616ea13339bc68e963e1f8"
   language="Lua"
   purpose="Control whether certain channels get hidden from main output"
   date_written="2011-07-27 01:00:00"
   requires="4.75"
   version="1.0"
   save_state="y"
   sequence="-8999"
>
<!-- sequence must be before 0 to not double trigger world triggers -->
<!-- sequence must be after channels plugin to capture unechoed info -->
<description trim="y">
USAGE:

   chats echo on      : show all channels in main window
   chats echo off     : do not show any channels in main window
   chats echo custom  : select a custom list of channels to show in the main window
</description>

</plugin>
<triggers>

<trigger
   enabled="n"
   name="OOC"
   match="^\<(OOC|IMM)\> (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Wartalk"
   match="^\[WAR\] (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="IMM"
   match="^\[IMM\] (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Music"
   match="^\[MUSIC\] (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Newbie"
   match="^\[(New-Player|Immortal)\] (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Ask_Answer"
   match="^\[(Ask|Answer)\] (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="RP_Chat"
   match="^\(Chat\) (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Race"
   match="^\<(Race)\> (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Clan"
   match="^\<Clan\> (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Yell"
   match="^\{Area-Yell\} (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="FriendChat"
   match="\{(FriendChat)\} (.+) \'(.+)\'"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Scouter"
   match="\[Scouter -(.+)\] (.+)$"
   regexp="y"
   script="channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="IMM_Logs"
   match="^(Log|Comm|Build|Monitor): (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="RP_Story"
   match="^\[RP-STORY (.+)\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Clan_Info"
   match="^\[Clan-Info\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Friend_Info"
   match="\[Friend-Info\] (.+)"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="News_Flash"
   match="^\[NEWS-FLASH\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Info"
   match="^\[(Info|A - Info)\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="HighScore"
   match="^\[HighScore\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Auto_Events"
   match="^\[Auto-Event\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="Aution_House"
   match="\[DBNU Auction House\] (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="say_get"
   match="^(.+) says (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   name="say"
   match="You say (.+)$"
   regexp="y"
   script="non_channel"
   omit_from_output="y"
   sequence="100"
   send_to="12"
><send>StopEvaluatingTriggers(true)</send>
</trigger>

<trigger
   enabled="n"
   match="^$"
   regexp="y"
   name="end_gag_omit"
   group="end_gag"
   omit_from_output="y"
   sequence="100"
   send_to="12"
>
<send>EnableTriggerGroup("end_gag", false)</send>
</trigger>

<trigger
   enabled="n"
   match="."
   regexp="y"
   name="end_gag_keep"
   group="end_gag"
   omit_from_output="n"
   sequence="101"
   send_to="12"
>
<send>EnableTriggerGroup("end_gag", false)</send>
</trigger>

</triggers>

<aliases>
<alias
   script="chat_echo_wrap"
   match="^chats? echo( on| off| channels| nonchannels)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

require "pairsbykeys"
--require "gmcphelper"

local init_nonchannel_keys = {"Auction_House", "Auto_Events", "Clan_Info", "Friend_Info", "HighScore", "Info", "IMM_Logs", "News_Flash", "RP_Story"} --"remote_socials"
local init_nonchannel_pairs = {["Auction_House"]="DBNU Auction House", ["Auto_Events"]="Auto-Event", ["Clan_Info"]="Clan-Info", ["Friend_Info"]="Friend-Info", ["HighScore"]="HighScore", ["Info"]="Info", ["IMM_Log"]="IMM Logs", ["News_Flash"]="NEWS-FLASH", ["RP_Story"]="RP-STORY"} --, ["remote_socials"]="Remote Socials"
local init_channel_keys = {"Ask_Answer", "Clan", "FriendChat", "IMM", "Music", "Newbie", "OOC", "Race", "RP_Chat", "say", "say_get", "Scouter", "Wartalk", "Yell"}
local init_channel_pairs = {["Ask_Answer"]="Ask_Answer", ["Clan"]="Clan", ["FriendChat"]="FriendChat", ["IMM"]="IMM", ["Music"]="Music", ["Newbie"]="Newbie", ["OOC"]="OOC", ["Race"]="Race", ["RP_Chat"]="RP_Chat", ["say"]="say", ["say_get"]="say_get", ["Scouter"]="Scouter", ["Wartalk"]="Wartalk", ["Yell"]="Yell"}

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "DBNU_colors.lua")

-- legacy variables
--echo_info = GetVariable("echo_info_2") ~= "0"
--echo_global_quest = GetVariable("echo_global_quest_2") ~= "0"
--echo_remort_auction = GetVariable("echo_remort_auction_2") ~= "0"
--echo_donations = GetVariable("echo_donations_2") ~= "0"
--echo_warfare = GetVariable("echo_warfare_2") ~= "0"

-- only hide echoes if at least one capture window is active
-- use CallPlugin ("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())
never_hide = true
list_of_filter_enablers = {}
function enable_hiding(true_false, enabler_id)
   list_of_filter_enablers[enabler_id] = true_false or nil
   num_enablers = 0
   for k,v in pairs(list_of_filter_enablers) do
      num_enablers = num_enablers + 1
   end
   if num_enablers > 0 then --(not aard_req_novisuals_mode) and (
      never_hide = false
      addDefaultNonChannels()
   else
      never_hide = true
      for i,v in ipairs(init_nonchannel_keys) do
         EnableTrigger(v, false)
      end
      --for i,v in ipairs(init_channel_keys) do
      --   EnableTrigger(v, false)
      --end
   end
end

enable_hiding(false, GetPluginID())


channels_table = {}
nonchannels_table = {}
loadstring(GetVariable("channels_table") or "")()
loadstring(GetVariable("nonchannels_table") or "")()

--function addNewChannel(name)
--   if not channels_table[name] then
--      channels_table[name] = {["echo"]=true}
--   end
--end

function other_should_echo(name)
   if never_hide or nonchannels_table[name]["echo"] then 
      return true
   end
   return false
end

function addDefaultNonChannels()
   for i,v in ipairs(init_nonchannel_keys) do
      nonchannels_table[v] = nonchannels_table[v] or {["echo"]=true}
      EnableTrigger(v, not other_should_echo(v))
   end
end

function addDefaultChannels()
   for i,v in ipairs(init_channel_keys) do
      channels_table[v] = channels_table[v] or {["echo"]=true}
   --addNewChannel(v)
   end
   addDefaultNonChannels()
end

addDefaultChannels()


--function echo_msg(msg)
--   Simulate(ColoursToANSI(msg).."\r\n")
--   if gmcp("config.compact") ~= "YES" then
--      Simulate("\r\n")
--   end
--   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
--end

function OnPluginListChanged ()
--   dofile "lua/aard_requirements.lua"
   for k,v in pairs(list_of_filter_enablers) do
      enable_hiding(GetPluginInfo(k, 17), k)
   end
end

function non_channel (name, line, wildcards, styles)
   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
end

function channel (name, line, wildcards, styles)
   EnableTriggerGroup("end_gag", true) -- gags trailing blank line
end

function rejection_message()
  Note()
  ColourNote ("yellow", "", "You can't hide messages with \"chats echo on\" or \"chats echo custom\" unless you have at least one secondary capture plugin active.")
  ColourNote ("yellow", "", "If you want to disable certain channels, do it with the available in-game commands.")
  ColourNote ("yellow", "", [[Otherwise you must have at least one plugin which uses the following line of code before disabling chat display in the client is allowed:   CallPlugin("55616ea13339bc68e963e1f8", "enable_hiding", true, GetPluginID())]])
  Note()
end

function chat_echo (toggle)
   if toggle == "" then
      ColourNote("yellow", "", "Current channel echo status: ")
      for k,v in pairsByKeys(channels_table) do
         ColourTell("yellow", "", tostring(k).." ")
         ColourNote((v["echo"] and "lime") or "red", "", tostring(v["echo"] or "false"))
      end
      Note("") -- just put this here now to show that I have some error... 
      ColourNote("yellow", "", "Current non-channel echo status: ")
      for b,c in pairsByKeys(nonchannels_table) do
         ColourTell("yellow", "", tostring(b).." ")
         ColourNote((c["echo"] and "lime") or "red", "", tostring(c["echo"] or "false"))
      end
      Note("")
   elseif toggle == "on" then
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = true
      end
      ColourNote ("yellow", "", "All chats are now", "lime", "", " shown ", "yellow", "", "in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled separately.")
      Note("")
   elseif toggle == "off" then
      if never_hide then
         return rejection_message()
      end
      for k,v in pairs(channels_table) do
         channels_table[k]["echo"] = nil
      end
      ColourNote ("yellow", "", "All chats are now", "red", "", " hidden ", "yellow", "", "in the main window.")
      ColourNote ("yellow", "", "Note: This does not affect \"other\" (non-channel) messages, which must be toggled separately.")
      Note("")
   elseif toggle == "channels" then
      local cdefaults = {}
      for k,v in pairs(channels_table) do
         cdefaults[k] = v["echo"]
      end
      local echo_result = utils.multilistbox("Choose which channels to show in the main window.", "Channel Echo Selection", init_channel_pairs, cdefaults)
      if echo_result then
         for k,v in pairs(channels_table) do
            v["echo"] = echo_result[k]
            --EnableTrigger(k, not other_should_echo(k))
         end
      end
   elseif toggle == "nonchannels" then
      local ncdefaults = {}
      for k,v in pairs(nonchannels_table) do
         ncdefaults[k] = v["echo"]
      end
      local echo_result = utils.multilistbox("Choose which non-channel to show in the main window.", "Non-Channel Echo Selection", init_nonchannel_pairs, ncdefaults)
      if echo_result then
         for k,v in pairs(nonchannels_table) do
            v["echo"] = echo_result[k]
            EnableTrigger(k, not other_should_echo(k))
         end
      end
   end -- if

   SaveState()
end

function chat_echo_wrap (name, line, wildcards)
   chat_echo(Trim(wildcards[1]):lower())
end -- chat_echo

require "serialize"
function OnPluginSaveState()
   SetVariable("channels_table", serialize.save("channels_table"))
   SetVariable("nonchannels_table", serialize.save("nonchannels_table"))
end

--function OnPluginInstall()
--   OnPluginEnable()
--end

--function OnPluginEnable ()
   -- if we are connected when the plugin loads, it must have been reloaded while playing
--   if IsConnected() then
--      OnPluginConnect()
--   end -- if already connected
--end -- OnPluginEnable

--function OnPluginClose()
--   OnPluginDisable()
--end

-- pull in telnet option handling
--dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

--function OnPluginDisable()
--   if IsConnected() then
--      Send_GMCP_Packet("gmcpchannels off")
--   end
--end

--function OnPluginConnect()
--   Send_GMCP_Packet("gmcpchannels on")
--   Send_GMCP_Packet("request char")
--end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
