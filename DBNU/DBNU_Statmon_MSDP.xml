<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Originally based on work by Lasher -->
<muclient>
<plugin
   name="DBNU_Statmon"
   author="Fiendish"
   id="ef4a86dbc9cd4dd6f4c69386"
   language="Lua"
   purpose="MSDP Version of statmon"
   date_written="2010-08-15 21:25:03"
   requires="4.73"
   version="2.1"
   save_state="y"
>
<description trim="y">

DBNU MSDP based stats monitor.

</description>
</plugin>

<aliases>
<alias
   match="resetdbnu"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_dbnu"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

dofile(GetPluginInfo(GetPluginID(), 20) .. "DBNU_register_z_on_create.lua")
dofile(GetPluginInfo(GetPluginID(), 20) .. "mw_theme_base.lua")
require "serialize"
require "movewindow"
require "commas"
dofile(GetPluginInfo(GetPluginID(), 20) .. "MSDPHelper.lua")
require "copytable"

default_width         = 209
default_height        = 287
default_x             = 658 + Theme.RESIZER_SIZE + 2
default_y             = 264
RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100
LEFT_MARGIN     = 10
TOP_MARGIN      = 5

-- Variables not saved.
startx     = ""
starty     = ""
posx       = ""
posy       = ""
hotspot_id = ""
cstyles    = {}
page_built = false
max_width  = 0

-- pull in telnet option handling
--dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

-- functions for handling color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "DBNU_colors.lua")


color_indices = {"Strength","Intelligence","Wisdom","Dexterity","Constitution","Luck","Charisma","Health","Ki","Alignment","Zeni","Moves","Hitroll","Damroll","Trains","Pracs","Quest Points","Trivia","TNL","Level"}

data_color_defaults = {["Strength"]=0xFFFFFF,["Intelligence"]=0xFFFFFF,["Wisdom"]=0xFFFFFF,["Dexterity"]=0xFFFFFF,["Constitution"]=0xFFFFFF,["Luck"]=0xFFFFFF,["Charisma"]=0xFFFFFF, ["Health"]=0xFFFFFF,["Ki"]=0xFFFFFF,["Moves"]=0xFFFFFF,["Hitroll"]=0xFFFFFF,["Damroll"]=0xFFFFFF,["Alignment"]=0xFFFFFF,["Zeni"]=0x00FFFF,["Quest Points"]=0xFFFFFF,["Trivia"]=0xFFFFFF,["TNL"]=0xFFFFFF,["Level"]=0xFFFFFF,["Trains"]=0xFFFFFF,["Pracs"]=0xFFFFFF}

assert (loadstring (GetVariable ("label_colors") or "label_colors = {}")) ()
assert (loadstring (GetVariable ("data_colors") or "data_colors = {}")) ()

for k,v in pairs(data_color_defaults) do
   data_colors[k] = data_colors[k] or v
end

function reset_dbnu()
   stacked = 0
   font_name = default_font_name
   font_size = default_font_size
   WindowPosition(win, default_x, default_y, 0, 18)
   WindowResize(win, default_width, default_height, Theme.PRIMARY_BODY)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   SaveState()
   OnPluginInstall()
end

bracket = {text=" : [",textcolour=Theme.BODY_TEXT}
slash = {text="/",textcolour=Theme.BODY_TEXT}
endbracket = {text="]",textcolour=Theme.BODY_TEXT}

function BuildStatsPage()

      max_width = 0
   cstyles = {}

   --- Check if we have data in each category, but only as much as necessary - once page built we can stop.
   --if (not text == "INT" or not text == "CON" or not text == "STR" or not text == "DEX" or not text == "CHA" or not text == "LCK" or not text == "WIS" or not text == "HEALTH" or not text == "MANA" or not text == "MONEY" or not text == "EXPERIENCE") then
   --   return
   --end

   if (stacked == 1) then
      table.insert(cstyles, {
            {text="Str",textcolour=label_colors["Strength"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s", commas_in_numbers and commas(getmsdp("STR")) or getmsdp("STR")),textcolour=data_colors["Strength"]},
            slash,
            {text=string.format("%-3s", commas_in_numbers and commas(getmsdp("STR_PERM")) or getmsdp("STR_PERM")),textcolour=data_colors["Strength"]},
            endbracket,

            {text="     Hp ",textcolour=label_colors["Health"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%6s",getmsdp("HEALTH")), textcolour=data_colors["Health"]},
            slash,
            {text=string.format("%6s",getmsdp("HEALTH_MAX")),textcolour=data_colors["Health"]},
            endbracket
            })

      table.insert(cstyles, {
            {text="Int",textcolour=label_colors["Intelligence"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("INT")),textcolour=data_colors["Intelligence"]},
            slash,
            {text=string.format("%-3s",getmsdp("INT_PERM")),textcolour=data_colors["Intelligence"]},
            endbracket,

            {text="     Ki ",textcolour=label_colors["Ki"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%6s",getmsdp("MANA")), textcolour=data_colors["Ki"]},
            slash,
            {text=string.format("%6s",getmsdp("MANA_MAX")),textcolour=data_colors["Ki"]},
            endbracket
            })

      table.insert(cstyles, {
            {text="Wis",textcolour=label_colors["Wisdom"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("WIS")),textcolour=data_colors["Wisdom"]},
            slash,
            {text=string.format("%-3s",getmsdp("WIS_PERM")),textcolour=data_colors["Wisdom"]},
            endbracket,

            {text="     Mvs",textcolour=label_colors["Moves"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%6s",getmsdp("MOVEMENT")), textcolour=data_colors["Moves"]},
            slash,
            {text=string.format("%6s",getmsdp("MOVEMENT_MAX")),textcolour=data_colors["Moves"]},
            endbracket
            })

      table.insert(cstyles, {
            {text="Dex",textcolour=label_colors["Dexterity"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("DEX")),textcolour=data_colors["Dexterity"]},
            slash,
            {text=string.format("%-3s",getmsdp("DEX_PERM")),textcolour=data_colors["Dexterity"]},
            endbracket
            })

      table.insert(cstyles, {
            {text="Con",textcolour=label_colors["Constitution"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("CON")),textcolour=data_colors["Constitution"]},
            slash,
            {text=string.format("%-3s",getmsdp("CON_PERM")),textcolour=data_colors["Constitution"]},
            endbracket,

            {text="     HR ",textcolour=label_colors["Hitroll"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("HITROLL")), textcolour=data_colors["Hitroll"]},
            endbracket
            })

      table.insert(cstyles, {
            {text="Lck",textcolour=label_colors["Luck"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("LCK")),textcolour=data_colors["Luck"]},
            slash,
            {text=string.format("%-3s",getmsdp("LCK_PERM")),textcolour=data_colors["Luck"]},
            endbracket,

            {text="     DR ",textcolour=label_colors["Damroll"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("DAMROLL")), textcolour=data_colors["Damroll"]},
            endbracket
            })

      table.insert(cstyles, {})

      table.insert(cstyles, {
            {text="N/A",textcolour=label_colors["TNL"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["TNL"]},
            endbracket,

            {text="       N/A",textcolour=label_colors["Level"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Level"]},
            endbracket,
            })

      table.insert(cstyles, {
            {text="QP ",textcolour=label_colors["Quest Points"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%7s","N/A"), textcolour=data_colors["Quest Points"]},
            endbracket,

            {text="     TP ",textcolour=label_colors["Trivia"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Trivia"]},
            endbracket,
            })

      table.insert(cstyles, {
            {text="Align",textcolour=label_colors["Alignment"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("ALIGNMENT")), textcolour=data_colors["Alignment"]},
            endbracket,

            {text="     Zeni",textcolour=label_colors["Zeni"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%s", commas_in_numbers and commas(getmsdp("MONEY")) or getmsdp("MONEY")), textcolour=data_colors["Zeni"]},
            endbracket,
            })

      table.insert(cstyles, {
            {text="RPP",textcolour=label_colors["Trains"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Trains"]},
            endbracket,

            {text="     SM",textcolour=label_colors["Pracs"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Pracs"]},
            endbracket,
            })

      fighting = getmsdp("OPPONENT_NAME")

      if fighting ~= "" and fighting ~= null then
         fstr = string.format("Foe : (%s/%s) %s",getmsdp("OPPONENT_HEALTH"),getmsdp("OPPONENT_HEALTH_MAX"),getmsdp("OPPONENT_NAME"))
         table.insert(cstyles,ColoursToStyles(fstr))
      else
         table.insert(cstyles,{text=""})
      end
   else
      table.insert(cstyles, {
            {text="Str",textcolour=label_colors["Strength"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s", commas_in_numbers and commas(getmsdp("STR")) or getmsdp("STR")),textcolour=data_colors["Strength"]},
            slash,
            {text=string.format("%-3s", commas_in_numbers and commas(getmsdp("STR_PERM")) or getmsdp("STR_PERM")),textcolour=data_colors["Strength"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Int",textcolour=label_colors["Intelligence"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("INT")),textcolour=data_colors["Intelligence"]},
            slash,
            {text=string.format("%-3s",getmsdp("INT_PERM")),textcolour=data_colors["Intelligence"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Wis",textcolour=label_colors["Wisdom"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("WIS")),textcolour=data_colors["Wisdom"]},
            slash,
            {text=string.format("%-3s",getmsdp("WIS_PERM")),textcolour=data_colors["Wisdom"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Dex",textcolour=label_colors["Dexterity"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("DEX")),textcolour=data_colors["Dexterity"]},
            slash,
            {text=string.format("%-3s",getmsdp("DEX_PERM")),textcolour=data_colors["Dexterity"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Con",textcolour=label_colors["Constitution"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("CON")),textcolour=data_colors["Constitution"]},
            slash,
            {text=string.format("%-3s",getmsdp("CON_PERM")),textcolour=data_colors["Constitution"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Lck",textcolour=label_colors["Luck"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("LCK")),textcolour=data_colors["Luck"]},
            slash,
            {text=string.format("%-3s",getmsdp("LCK_PERM")),textcolour=data_colors["Luck"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="HR ",textcolour=label_colors["Hitroll"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("HITROLL")), textcolour=data_colors["Hitroll"]},
            endbracket
      })


      table.insert(cstyles, {
            {text="DR ",textcolour=label_colors["Damroll"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("DAMROLL")), textcolour=data_colors["Damroll"]},
            endbracket
      })

      table.insert(cstyles,{})

      table.insert(cstyles, {
            {text="RPP",textcolour=label_colors["Trains"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Trains"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="SM ",textcolour=label_colors["Pracs"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Pracs"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Zeni ",textcolour=label_colors["Zeni"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%s",commas_in_numbers and commas(getmsdp("MONEY")) or getmsdp("MONEY")), textcolour=data_colors["Zeni"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="TP   ",textcolour=label_colors["Trivia"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["Trivia"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="QP   ",textcolour=label_colors["Quest Points"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%7s","N/A"), textcolour=data_colors["Quest Points"]},
            endbracket
      })

      table.insert(cstyles, {})

      table.insert(cstyles, {
            {text="Lvl  ",textcolour=label_colors["Level"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("LEVEL")), textcolour=data_colors["Level"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="TNL  ",textcolour=label_colors["TNL"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s","N/A"), textcolour=data_colors["TNL"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Align",textcolour=label_colors["Alignment"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%5s",getmsdp("ALIGNMENT")), textcolour=data_colors["Alignment"]},
            endbracket
      })

      table.insert(cstyles,{})

      table.insert(cstyles, {
            {text="Hp ",textcolour=label_colors["Health"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("HEALTH")),textcolour=data_colors["Health"]},
            slash,
            {text=string.format("%-3s",getmsdp("HEALTH_MAX")),textcolour=data_colors["Health"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Ki ",textcolour=label_colors["Ki"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("MANA")),textcolour=data_colors["Ki"]},
            slash,
            {text=string.format("%-3s",getmsdp("MANA_MAX")),textcolour=data_colors["Ki"]},
            endbracket
      })

      table.insert(cstyles, {
            {text="Mvs",textcolour=label_colors["Moves"] or Theme.BODY_TEXT},
            bracket,
            {text=string.format("%3s",getmsdp("MOVEMENT")),textcolour=data_colors["Moves"]},
            slash,
            {text=string.format("%-3s",getmsdp("MOVEMENT_MAX")),textcolour=data_colors["Moves"]},
            endbracket
      })

      fighting = getmsdp("OPPONENT_NAME")

      if fighting ~= "" and fighting ~= null then
         fstr = string.format("Foe : (%s/%s) %s",getmsdp("OPPONENT_HEALTH"),getmsdp("OPPONENT_HEALTH_MAX"),getmsdp("OPPONENT_NAME"))
         table.insert(cstyles,ColoursToStyles(fstr))
      else
         table.insert(cstyles,{text=""})
      end
   end -- if stacked

   for i,v in ipairs(cstyles) do
      max_width = math.max(max_width, styleWidth(v)+LEFT_MARGIN)
   end
   page_built = true
end -- BuildStatsPage

function Print()
   bodyleft, bodytop, bodyright, bodybottom = Theme.DrawBorder(win)
   WindowRectOp(win, 2, bodyleft, bodytop, bodyright+1, bodybottom+1, Theme.PRIMARY_BODY) -- blank

   if not page_built then
      txt = "Stats will appear "
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText(win, font_id, txt, (width-txtlen)/2, (height/2)-line_height, bodyright, bodybottom, Theme.BODY_TEXT, utf8)
      txt = "when play begins."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText(win, font_id, txt, (width-txtlen)/2, height/2, bodyright, bodybottom, Theme.BODY_TEXT, utf8)
   else
      -- display each line
      local left = LEFT_MARGIN
      local top = 0
      for i, v in ipairs(cstyles) do
         top = TOP_MARGIN + (i - 1) * line_height
         Theme.WindowTextFromStyles(win, font_id, v, left, top, bodyright, bodybottom)
      end -- for
      if cstyles[#cstyles].text == "" then
         Theme.WindowTextFromStyles(win, font_id, {{text="Foe :",textcolour=0x444444}}, left, top, bodyright, bodybottom)
      end
   end

   Theme.AddResizeTag(win, 1, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback")

   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
end

function RefreshPage()
   BuildStatsPage()
   Print()
end

-- right click menu
function right_click_menu ()

   colorstring = ">All Fields|All Labels|All Data|<|-|"
   for k,v in pairs(color_indices) do
      colorstring = colorstring..">"..v.."|"..v.." Label ("..RGBColourToName(label_colors[v] or Theme.BODY_TEXT)..")|"..v.." Data ("..RGBColourToName(data_colors[v])..")|<|"
   end

   menustring = "Flip Orientation|Change Font|>Colors|"..colorstring.."<|"..(commas_in_numbers and "+" or "").."Commas|-|Bring To Front|Send To Back|-|Reset Defaults"

   result = WindowMenu (win,
      WindowInfo (win, 14),  -- x position
      WindowInfo (win, 15),   -- y position
      menustring) -- content

   if result == "Flip Orientation" then
      stacked = (((stacked == 1) and 0) or 1)
      SetVariable("stacked", stacked)
      height           = orig_height
      width            = default_width
      SetVariable("width",width)
      SetVariable("height",height)
      SetVariable("font_name",font_name)
      SetVariable("font_size",font_size)
      OnPluginInstall()
      BuildStatsPage()
      if (page_built) then
         if (max_width ~= 0) then
            width = max_width+LEFT_MARGIN
            height = max_height+TOP_MARGIN
            SetVariable("width", width)
            SetVariable("height",height)
         end
         resize_window()
      end
      SaveState()
   elseif result == "Change Font" then
      wanted_font = utils.fontpicker(font_name, font_size) --font dialog
      if wanted_font then
         font_name = wanted_font.name
         font_size = wanted_font.size
         SetVariable("font_name", font_name)
         SetVariable("font_size", font_size)
         SaveState()
         OnPluginInstall()
         BuildStatsPage()
         if (page_built) then
            if (max_width ~= 0) then
               width = max_width+LEFT_MARGIN
               height = max_height+TOP_MARGIN
               SetVariable("width", width)
               SetVariable("height",height)
            end
            resize_window()
         end
      end
   elseif string.find(result,"Label") then
      local item = string.sub(result,1,string.find(result,"Label")-2)
      if item == "All" then
         local newcolour = PickColour(Theme.BODY_TEXT)
         if newcolour ~= -1 then
            for i,v in pairs(color_indices) do
               label_colors[v] = newcolour
            end
            SaveState()
            RefreshPage()
         end
      else
         local newcolour = PickColour(label_colors[item] or Theme.BODY_TEXT)
         if newcolour ~= -1 then
            label_colors[item] = newcolour
            SaveState()
            RefreshPage()
         end
      end
   elseif string.find(result,"Data") then
      local item = string.sub(result,1,string.find(result,"Data")-2)
      if item == "All" then
         local newcolour = PickColour(0xFFFFFF)
         if newcolour ~= -1 then
            for i,v in pairs(color_indices) do
               data_colors[v] = newcolour
            end
            SaveState()
            RefreshPage()
         end
      else
         local newcolour = PickColour(data_colors[item])
         if newcolour ~= -1 then
            data_colors[item] = newcolour
            SaveState()
            RefreshPage()
         end
      end
   elseif result == "Commas" then
      commas_in_numbers = not commas_in_numbers
      SaveState()
      OnPluginInstall()
      BuildStatsPage()
      if (page_built) then
         if (max_width ~= 0) then
            width = max_width+LEFT_MARGIN
            height = max_height+TOP_MARGIN
            SetVariable("width", width)
            SetVariable("height",height)
         end
         resize_window()
      end
   elseif result == "Bring To Front" then
      CallPlugin("462b665ecb569efbf261422f","boostMe", win)
   elseif result == "Send To Back" then
      CallPlugin("462b665ecb569efbf261422f","dropMe", win)
   elseif result == "Reset Defaults" then
      commas_in_numbers   = false
      font_name        = default_font_name
      font_size        = default_font_size
      height           = default_height
      width            = default_width
      stacked = 0

      label_colors = {}
      data_colors = copytable.deep(data_color_defaults)
      SaveState()
      OnPluginInstall()
      BuildStatsPage()
      if (page_built) then
         resize_window()
      end
   end -- if
end -- right_click_menu

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)

   -- Look for MSDP handler.
    if (id == 'b3aae34498d5bf19b5b2e2af') then
        pagebuilt = true
        --if (text == "INT" or text == "CON" or text == "STR" or text == "DEX" or text == "CHA" or text == "LCK" or text == "WIS" or text == "HEALTH" or text == "MANA" or text == "MONEY" or text == "EXPERIENCE") then
        RefreshPage()
        --end
    elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
        CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
    end
end

---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if max_width ~= 0 and width < math.min(MIN_SIZE, max_width + LEFT_MARGIN) then
      width = math.min(MIN_SIZE, max_width + LEFT_MARGIN)
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end

   height = height + posy - starty
   starty = posy
   if height < math.min(MIN_SIZE, max_height+TOP_MARGIN) then
      height = math.min(MIN_SIZE, max_height+TOP_MARGIN)
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      resize_window()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
   resize_window()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()
   -- save window current location for next time
   movewindow.save_state (win)
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
   if WindowInfo(win, 3) and WindowInfo(win, 4) then
      width = WindowInfo(win, 3)
      height = WindowInfo(win, 4)
   end
   SetVariable ("width", width)
   SetVariable ("height", height)
   SetVariable ("font_name", font_name)
   SetVariable ("font_size", font_size)
   SetVariable ("stacked", stacked)
   SetVariable ("commas_in_numbers", commas_in_numbers and 1 or 0)
   SetVariable ("label_colors", serialize.save("label_colors"))
   SetVariable ("data_colors", serialize.save("data_colors"))
end

function OnPluginClose ()
   OnPluginDisable()
   WindowDelete(win)
end

function OnPluginDisable ()
   WindowShow( win, false )
end

function OnPluginEnable ()
   WindowShow( win, true)
end

function OnPluginConnect()
   --TelnetOptionOff(TELOPT_STATMON)
end


win = GetPluginID()
--function OnPluginListChanged ()
--   dofile "lua/DBNU_requirements.lua"
--end

function OnPluginInstall()
   font_id = GetPluginID()

   local fonts = utils.getfontfamilies ()

   if fonts ["Consolas"] then
      default_font_size = 11
      default_font_name = "Consolas"
   elseif fonts["Courier New"] then
      default_font_size = 9
      default_font_name = "Courier New"
   else
      default_font_size = 9
      default_font_name = "Lucida Console"
   end

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   height = tonumber(GetVariable("height")) or default_height
   orig_height = height
   width = tonumber(GetVariable("width")) or default_width
   stacked = tonumber(GetVariable("stacked")) or 0
   commas_in_numbers = tonumber(GetVariable("commas_in_numbers")) == 1
   windowinfo = movewindow.install(win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   WindowCreate(win, windowinfo.window_left, windowinfo.window_top, width, height, windowinfo.window_mode, windowinfo.window_flags, Theme.SECONDARY_BODY)
   WindowFont(win, font_id, font_name, font_size, false, false, false, false, 0)

   --- Grab font size metrics
   line_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 2
   max_height = (line_height*(((stacked == 1) and 12) or 23))+(TOP_MARGIN+1)

   resize_window()

   --if IsConnected() then
   --   Send_GMCP_Packet("request char")
   --end
   WindowShow(win, true)
end

function resize_window()
   WindowResize(win, width, height, Theme.SECONDARY_BODY)
   movewindow.add_drag_handler(win, 0, 0, 0, 0)

   Print()
end

-------------------------------------------------------------------------------
--- Calculate width of a line of styled text without drawing it.
-------------------------------------------------------------------------------
function styleWidth(styles)
   local s = ""
   for _,w in ipairs (styles) do
      s = s .. w.text
   end
   return WindowTextWidth(win,font_id,s)
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
